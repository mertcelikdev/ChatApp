namespace ChatApp.Controllers;

using Microsoft.AspNetCore.Mvc;
using ChatApp.Models;
using ChatApp.Services;
using Microsoft.AspNetCore.Authentication;
using System.Security.Claims;

[ApiController]
[Route("api/[controller]")]
public class UserApiController : ControllerBase
{
    private readonly IUserService _userService;

    public UserApiController(IUserService userService)
    {
        _userService = userService;
    }

    // ðŸ”¥ KullanÄ±cÄ± giriÅŸi (async)
    [HttpPost("login")]
    public async Task<IActionResult> Login([FromBody] LoginRequest request)
    {
        if (string.IsNullOrWhiteSpace(request.Username))
        {
            return BadRequest(new { success = false, message = "KullanÄ±cÄ± adÄ± boÅŸ olamaz" });
        }

        if (string.IsNullOrWhiteSpace(request.Password))
        {
            return BadRequest(new { success = false, message = "Åžifre boÅŸ olamaz" });
        }

        try
        {
            var username = request.Username.Trim();
            
            // KullanÄ±cÄ± adÄ± ve ÅŸifre doÄŸrulama
            var existingUser = await _userService.ValidateUserAsync(username, request.Password);
            if (existingUser == null)
            {
                return Unauthorized(new { success = false, message = "KullanÄ±cÄ± adÄ± veya ÅŸifre hatalÄ±" });
            }

            // KullanÄ±cÄ± zaten aktif mi kontrol et
            var activeSessions = await _userService.GetActiveSessionsAsync(existingUser.Id);
            if (activeSessions.Any())
            {
                return BadRequest(new { success = false, message = "Bu kullanÄ±cÄ± zaten giriÅŸ yapmÄ±ÅŸ" });
            }

            // Yeni session oluÅŸtur
            var session = await _userService.CreateSessionAsync(existingUser.Id, request.ConnectionId);

            // ASP.NET Core Authentication sistemini kullan
            var claims = new List<Claim>
            {
                new Claim(ClaimTypes.Name, existingUser.Username),
                new Claim(ClaimTypes.NameIdentifier, existingUser.Id.ToString()),
                new Claim("DisplayName", existingUser.DisplayName ?? existingUser.Username),
                new Claim("ProfileImage", existingUser.ProfileImageUrl ?? ""),
                new Claim("Role", existingUser.Username == "admin" ? "Admin" : "User")
            };

            var claimsIdentity = new ClaimsIdentity(claims, "CookieAuth");
            var authProperties = new AuthenticationProperties
            {
                IsPersistent = true, // Remember me
                ExpiresUtc = DateTimeOffset.UtcNow.AddHours(24)
            };

            await HttpContext.SignInAsync("CookieAuth", new ClaimsPrincipal(claimsIdentity), authProperties);

            // KullanÄ±cÄ±nÄ±n son giriÅŸ tarihini gÃ¼ncelle
            await _userService.UpdateLastLoginAsync(existingUser.Id);

            // Eski cookie de set et (uyumluluk iÃ§in)
            var cookieOptions = new CookieOptions
            {
                HttpOnly = false, // JavaScript'ten eriÅŸilebilir olmasÄ± iÃ§in
                Secure = false, // HTTPS iÃ§in true yapÄ±labilir
                SameSite = SameSiteMode.Lax,
                Expires = DateTime.UtcNow.AddHours(24)
            };
            Response.Cookies.Append("chatapp_username", existingUser.Username, cookieOptions);

            // Online kullanÄ±cÄ± listesini getir
            var onlineUsers = await _userService.GetActiveUsersAsync();

            Console.WriteLine($"ðŸ‘¤ User logged in: {username} - Auth cookie set");

            return Ok(new { 
                success = true, 
                message = "GiriÅŸ baÅŸarÄ±lÄ±",
                user = new { 
                    id = existingUser.Id,
                    username = existingUser.Username,
                    profileImageUrl = existingUser.ProfileImageUrl,
                    loginTime = session.LoginTime,
                    sessionId = session.Id
                },
                onlineUsers = onlineUsers
            });
        }
        catch (Exception ex)
        {
            return StatusCode(500, new { success = false, message = $"GiriÅŸ sÄ±rasÄ±nda hata: {ex.Message}" });
        }
    }

    // ðŸ”¥ KullanÄ±cÄ± kaydÄ± (async)
    [HttpPost("register")]
    public async Task<IActionResult> Register([FromBody] RegisterRequest request)
    {
        if (string.IsNullOrWhiteSpace(request.Username))
        {
            return BadRequest(new { success = false, message = "KullanÄ±cÄ± adÄ± boÅŸ olamaz" });
        }

        if (string.IsNullOrWhiteSpace(request.Email))
        {
            return BadRequest(new { success = false, message = "E-posta boÅŸ olamaz" });
        }

        if (string.IsNullOrWhiteSpace(request.Password))
        {
            return BadRequest(new { success = false, message = "Åžifre boÅŸ olamaz" });
        }

        if (request.Username.Length < 3 || request.Username.Length > 20)
        {
            return BadRequest(new { success = false, message = "KullanÄ±cÄ± adÄ± 3-20 karakter arasÄ± olmalÄ±dÄ±r" });
        }

        if (request.Password.Length < 6)
        {
            return BadRequest(new { success = false, message = "Åžifre en az 6 karakter olmalÄ±dÄ±r" });
        }

        try
        {
            var username = request.Username.Trim();
            var email = request.Email.Trim();
            
            // KullanÄ±cÄ± adÄ± kontrolÃ¼
            var existingUser = await _userService.GetUserByUsernameAsync(username);
            if (existingUser != null)
            {
                return BadRequest(new { success = false, message = "Bu kullanÄ±cÄ± adÄ± zaten alÄ±nmÄ±ÅŸ" });
            }

            // Yeni kullanÄ±cÄ± oluÅŸtur
            var newUser = await _userService.CreateUserAsync(username, request.Password, request.ProfileImageUrl);
            
            // Email'i ayrÄ±ca set edelim
            newUser.Email = email;
            
            // KullanÄ±cÄ±yÄ± online yap ve session oluÅŸtur (register sÄ±rasÄ±nda otomatik login)
            newUser.IsOnline = true;
            newUser.LastLoginAt = DateTime.UtcNow;
            await _userService.UpdateUserAsync(newUser);
            
            // Session oluÅŸtur
            var session = await _userService.CreateSessionAsync(newUser.Id, "register-auto-login");
            
            // ASP.NET Core Authentication sistemini kullan
            var claims = new List<Claim>
            {
                new Claim(ClaimTypes.Name, newUser.Username),
                new Claim(ClaimTypes.NameIdentifier, newUser.Id.ToString()),
                new Claim("DisplayName", newUser.DisplayName ?? newUser.Username),
                new Claim("ProfileImage", newUser.ProfileImageUrl ?? ""),
                new Claim("Role", newUser.Username == "admin" ? "Admin" : "User")
            };

            var claimsIdentity = new ClaimsIdentity(claims, "CookieAuth");
            var authProperties = new AuthenticationProperties
            {
                IsPersistent = true, // Remember me
                ExpiresUtc = DateTimeOffset.UtcNow.AddHours(24)
            };

            await HttpContext.SignInAsync("CookieAuth", new ClaimsPrincipal(claimsIdentity), authProperties);

            // Eski cookie de set et (uyumluluk iÃ§in)
            var cookieOptions = new CookieOptions
            {
                HttpOnly = false, // JavaScript'ten eriÅŸilebilir olmasÄ± iÃ§in
                Secure = false, // HTTPS iÃ§in true yapÄ±labilir
                SameSite = SameSiteMode.Lax,
                Expires = DateTime.UtcNow.AddHours(24)
            };
            Response.Cookies.Append("chatapp_username", newUser.Username, cookieOptions);
            
            Console.WriteLine($"ðŸŽ‰ Yeni kullanÄ±cÄ± kaydÄ± ve otomatik giriÅŸ: {username} ({email}) - Auth cookie set");

            return Ok(new { 
                success = true, 
                message = "KayÄ±t baÅŸarÄ±lÄ±! HoÅŸ geldiniz!",
                user = new { 
                    id = newUser.Id, 
                    username = newUser.Username,
                    email = newUser.Email,
                    createdAt = newUser.CreatedAt
                }
            });
        }
        catch (Exception ex)
        {
            return StatusCode(500, new { success = false, message = $"KayÄ±t sÄ±rasÄ±nda hata: {ex.Message}" });
        }
    }

    // E-posta formatÄ± kontrolÃ¼
    private static bool IsValidEmail(string email)
    {
        try
        {
            var addr = new System.Net.Mail.MailAddress(email);
            return addr.Address == email;
        }
        catch
        {
            return false;
        }
    }

    // ðŸ”¥ KullanÄ±cÄ± Ã§Ä±kÄ±ÅŸÄ± (async)
    [HttpPost("logout")]
    public async Task<IActionResult> Logout([FromBody] LogoutRequest request)
    {
        if (string.IsNullOrWhiteSpace(request.Username))
        {
            return BadRequest(new { success = false, message = "KullanÄ±cÄ± adÄ± boÅŸ olamaz" });
        }

        try
        {
            var username = request.Username.Trim();
            var user = await _userService.GetUserByUsernameAsync(username);
            
            if (user != null)
            {
                // KullanÄ±cÄ±nÄ±n tÃ¼m aktif session'larÄ±nÄ± kapat
                await _userService.EndSessionAsync(user.Id);
                
                // User'Ä± offline yap
                user.IsOnline = false;
                user.LastLoginAt = DateTime.UtcNow;
                await _userService.UpdateUserAsync(user);
                
                // Cookie'yi temizle
                Response.Cookies.Delete("chatapp_username");
                
                Console.WriteLine($"ðŸ‘¤ User logged out: {username} - Cookie cleared");

                return Ok(new { 
                    success = true, 
                    message = "Ã‡Ä±kÄ±ÅŸ baÅŸarÄ±lÄ±",
                    username = username
                });
            }
            else
            {
                return NotFound(new { success = false, message = "KullanÄ±cÄ± bulunamadÄ±" });
            }
        }
        catch (Exception ex)
        {
            return StatusCode(500, new { success = false, message = $"Ã‡Ä±kÄ±ÅŸ sÄ±rasÄ±nda hata: {ex.Message}" });
        }
    }

    // ðŸ”¥ Online kullanÄ±cÄ±larÄ± getir
    [HttpGet("online-users")]
    public async Task<IActionResult> GetOnlineUsers()
    {
        try
        {
            var onlineUsers = await _userService.GetActiveUsersAsync();
            
            return Ok(new { 
                success = true, 
                users = onlineUsers,
                count = onlineUsers.Count()
            });
        }
        catch (Exception ex)
        {
            return StatusCode(500, new { success = false, message = $"KullanÄ±cÄ± listesi alÄ±nÄ±rken hata: {ex.Message}" });
        }
    }

    // ðŸ”¥ Public chat mesajlarÄ±nÄ± getir (async)
    [HttpGet("public-messages")]
    public async Task<IActionResult> GetPublicMessages()
    {
        try
        {
            var messages = await _userService.GetPublicMessagesAsync(50);
            return Ok(new { success = true, messages = messages });
        }
        catch (Exception ex)
        {
            return StatusCode(500, new { success = false, message = $"Public mesajlar alÄ±nÄ±rken hata: {ex.Message}" });
        }
    }

    // ðŸ”¥ KullanÄ±cÄ±ya Ã¶zel mesajlarÄ± getir (async)
    [HttpGet("private-messages/{username}")]
    public async Task<IActionResult> GetPrivateMessages(string username, [FromQuery] string? withUser = null)
    {
        try
        {
            var user = await _userService.GetUserByUsernameAsync(username);
            if (user == null)
            {
                return Unauthorized(new { success = false, message = "KullanÄ±cÄ± bulunamadÄ±" });
            }

            var messages = await _userService.GetPrivateMessagesAsync(user.Id, withUser, 50);
            return Ok(new { success = true, messages = messages });
        }
        catch (Exception ex)
        {
            return StatusCode(500, new { success = false, message = $"Private mesajlar alÄ±nÄ±rken hata: {ex.Message}" });
        }
    }

    // ðŸ”¥ Public mesaj kaydet (async)
    [HttpPost("save-public-message")]
    public async Task<IActionResult> SavePublicMessage([FromBody] ChatMessage message)
    {
        try
        {
            var user = await _userService.GetUserByUsernameAsync(message.From);
            if (user == null)
            {
                return Unauthorized(new { success = false, message = "KullanÄ±cÄ± giriÅŸ yapmamÄ±ÅŸ" });
            }

            await _userService.SavePublicMessageAsync(user.Id, message.Message);

            Console.WriteLine($"ðŸ“¢ Public message saved: {message.From} - {message.Message}");
            return Ok(new { success = true, message = "Mesaj kaydedildi" });
        }
        catch (Exception ex)
        {
            return StatusCode(500, new { success = false, message = $"Mesaj kaydedilirken hata: {ex.Message}" });
        }
    }

    // ðŸ”¥ Private mesaj kaydet (async)
    [HttpPost("save-private-message")]
    public async Task<IActionResult> SavePrivateMessage([FromBody] ChatMessage message)
    {
        try
        {
            var fromUser = await _userService.GetUserByUsernameAsync(message.From);
            var toUser = await _userService.GetUserByUsernameAsync(message.To);

            if (fromUser == null)
            {
                return Unauthorized(new { success = false, message = "GÃ¶nderen kullanÄ±cÄ± bulunamadÄ±" });
            }

            if (toUser == null)
            {
                return BadRequest(new { success = false, message = "AlÄ±cÄ± kullanÄ±cÄ± bulunamadÄ±" });
            }

            await _userService.SavePrivateMessageAsync(fromUser.Id, toUser.Id, message.Message);

            Console.WriteLine($"ðŸ“¨ Private message saved: {message.From} â†’ {message.To}");
            return Ok(new { success = true, message = "Ã–zel mesaj kaydedildi" });
        }
        catch (Exception ex)
        {
            return StatusCode(500, new { success = false, message = $"Ã–zel mesaj kaydedilirken hata: {ex.Message}" });
        }
    }

    // ðŸ”¥ KullanÄ±cÄ± durumunu kontrol et (async)
    [HttpGet("status/{username}")]
    public async Task<IActionResult> CheckUserStatus(string username)
    {
        try
        {
            var user = await _userService.GetUserByUsernameAsync(username);
            if (user == null)
            {
                return Ok(new { 
                    success = true, 
                    username = username,
                    isOnline = false
                });
            }

            var activeSessions = await _userService.GetActiveSessionsAsync(user.Id);
            var isOnline = activeSessions.Any();
            var latestSession = activeSessions.OrderByDescending(s => s.LoginTime).FirstOrDefault();

            return Ok(new { 
                success = true, 
                username = username,
                isOnline = isOnline,
                loginTime = latestSession?.LoginTime,
                connectionId = latestSession?.ConnectionId
            });
        }
        catch (Exception ex)
        {
            return StatusCode(500, new { success = false, message = $"KullanÄ±cÄ± durumu kontrol edilirken hata: {ex.Message}" });
        }
    }

    // ðŸ”¥ Zorla logout (debug iÃ§in)
    [HttpPost("force-logout")]
    public async Task<IActionResult> ForceLogout([FromBody] LogoutRequest request)
    {
        if (string.IsNullOrWhiteSpace(request.Username))
        {
            return BadRequest(new { success = false, message = "KullanÄ±cÄ± adÄ± boÅŸ olamaz" });
        }

        try
        {
            await _userService.ForceLogoutUserAsync(request.Username.Trim());
            
            return Ok(new { 
                success = true, 
                message = $"KullanÄ±cÄ± {request.Username} zorla offline yapÄ±ldÄ±",
                username = request.Username
            });
        }
        catch (Exception ex)
        {
            return StatusCode(500, new { success = false, message = $"Force logout sÄ±rasÄ±nda hata: {ex.Message}" });
        }
    }

    // ðŸ”¥ Debug - tÃ¼m kullanÄ±cÄ±larÄ± offline yap
    [HttpPost("debug-offline-all")]
    public async Task<IActionResult> DebugOfflineAll()
    {
        try
        {
            var message = await _userService.DebugOfflineAllUsersAsync();
            
            return Ok(new { 
                success = true, 
                message = message
            });
        }
        catch (Exception ex)
        {
            return StatusCode(500, new { success = false, message = $"Debug offline all sÄ±rasÄ±nda hata: {ex.Message}" });
        }
    }
}
